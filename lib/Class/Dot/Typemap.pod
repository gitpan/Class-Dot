# Generated by Pod::WikiDoc version 0.18

=pod

=head1 NAME

Class::Dot::Typemap - Standard Type Constraints (Autogenerated)

=head1 VERSION

This document describes C<<< Class::Dot >>> version 2.0.0_10

=head1 SYNOPSIS

    use Class::Dot::Typemap;
 
     # Get the type instance for a type
     my $type = find_type_constraint($type_name);
 
     # Resolve any aliases for a type name.
     $type_name = Class::Dot::Typemap->get_type($type_name)}
 
     # Get a subroutien ref to a function to check the type constraint. 
     my $check_constraint = Class::Dot::Typemap->get_compiled_constraint($type_name)
     my $is_valid_value   = 1 if $check_constraint->($value);
 
     # Get a list of the name for all standard types.
     my @std_types = Class::Dot::Typemap->get_types()
 
     # Get a hash of all type constraints.
     my %constraints = %{ Class::Dot::Typemap->type_constraints() };
 
     # Export all type constraints as functions to the current package.
     Class::Dot::Typemap->export_tyoe_constraints_as_functions();
 
     my $is_string  = String("hello");
     my $is_int     = Int(1000);
     my $is_not_int = Int(100.3);

=head1 DESCRIPTION

This is the map of standard type constraints.

B<WARNING> This file is generated automatically by the C<<< Typemap >>> program in the top
of the Class::Dot distribution, so any changes to this file will be lost.

=head1 SUBROUTINESE<sol>METHODS

=head2 CLASS METHODS

=head3 C<<< find_type_constraint($type_name, [@default_values]) >>>

Get the type instance for a type by name.
(Will be initialized with C<<< @default_value >>> if given.)

=head2 INSTANCE METHODS

=head3 C<<< get_type($type_name) >>>

Get the real type name for any type name..
(Resolve aliases).

=head3 C<<< get_compiled_constraint($type_name >>>)

Get a function that can check if a value conforms to the
type constraint C<<< $type_name >>>.

Example:

     my $check_constraint = Class::Dot::Typemap->get_compiled_constraint('String');
     ok( $check_constraint->("hello world"), 'string is a string' );
     ok(not $check_constraint->([]), 'refernce to array is not a string');

=head3 C<<< get_types() >>>

Get a list of names for all standard type constraints.

=head3 C<<< type_constraints() >>>

Get a hash with all standard type constraints.
The key is the name and the value is the reference to the constraint checking
function.

=head3 C<<< export_type_constraints_as_functions() >>>

Exports all type constraints as functions in the caller namespace with the
type name as the name of the function.

E.g: String becomes String(), Int becomes Int() etc.

Example:

     Class::Dot::Typemap->export_tyoe_constraints_as_functions();
     ok( String("hello world"), 'string is a string' );
     ok(not String([]), 'refernce to array is not a string');

=head1 DIAGNOSTICS

=head2 C<<< Unknown type: %s >>>

There is no type with that name.

=head1 CONFIGURATION AND ENVIRONMENT

This module requires no configuration file or environment variables.

=head1 DEPENDENCIES

=over

=item *

L<Class::Dot>

=back

=over

=item *

L<version>

=back

=over

=item *

L<Params::Util>

=back

=over

=item *

L<Scalar::Util>

=back

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to
L<bug-class-dot@rt.cpan.org|mailto:bug-class-dot@rt.cpan.org>, or through the
web interface at L<CPAN Bug tracker|http://rt.cpan.org>.

=head1 SEE ALSO

=head2 L<Class::Dot::Type>

=head2 L<Class::Dot>

=head2 L<Class::Dot::Manual>

=head1 AUTHOR

Ask Solem, L<asksh@cpan.org>.

=head1 LICENSE AND COPYRIGHT

Copyright (c), 2007 Ask Solem L<ask@0x61736b.net|mailto:ask@0x61736b.net>.

C<<< Class::Dot >>> is distributed under the Modified BSD License.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this
list of conditions and the following disclaimer in the documentation andE<sol>or
other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote products
derived
from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED                        
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF                                
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO                          
EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                              
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,                        
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR                      
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER                       
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)                          
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE                          
POSSIBILITY OF SUCH DAMAGE.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE
SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE
STATED IN WRITING THE COPYRIGHT HOLDERS ANDE<sol>OR OTHER PARTIES PROVIDE THE
SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY ANDE<sol>OR REDISTRIBUTE THE
SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO
LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER
SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.


=for stopwords expandtab shiftround
{export_type_constraints_as_functions()}

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
# End:
# vim: expandtab tabstop=4 shiftwidth=4 shiftround
